// 最优子结构
// 重叠子问题
// 状态转移方程不好确定
// 已知的状态可能不明显
// 递归转迭代，一部分同学可能不知道怎么转（这个就是纯粹的编程基础问题了，多写多练哈）

// 总结一下，对于动态规划，笔者建议大家优先选择这样的分析路径：

// 递归思想明确树形思维模型：找到问题终点，思考倒退的姿势，往往可以帮助你更快速地明确状态间的关系
// 结合记忆化搜索，明确状态转移方程
// 递归代码转化为迭代表达（这一步不一定是必要的，1、2本身为思维路径，而并非代码实现。若你成长为熟手，2中分析出来的状态转移方程可以直接往循环里塞，根本不需要转换）。

// 楼梯
const climbStairs = (n) => {
    let prev1 = 1
    let prev2 = 2;
    let cur;
    for (let i = 3; i <=n; i++) {
        cur = prev1 + prev2;
        [prev1, prev2] = [prev2, cur]
    }
    return cur;
}

